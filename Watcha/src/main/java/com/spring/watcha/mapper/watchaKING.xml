<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="watcha">

   <!-- 영화 및 드라마 등 정보 가져오기  시작 -->
   <resultMap id="movieResultMap" type="com.spring.watcha.model.MovieVO">
       <id     		property="movie_id"          column="movie_id"/>
       <result 		property="movie_title" 		column="movie_title"/>
       <result 		property="overview" 		column="overview"/>
       <result 		property="original_language" column="original_language"/>
       <result 		property="original_title" 	column="original_title"/>
       <result 		property="release_date" 		column="release_date"/>
       <result 		property="tagline" 			column="tagline"/>
       <result 		property="runtime" 			column="runtime"/>
       <result 		property="poster_path" 		column="poster_path"/>
       <result 		property="backdrop_path" 	column="backdrop_path"/>
       <result 		property="rating_count" 		column="rating_count"/>
       <result 		property="rating_avg" 		column="rating_avg"/>
       <collection  property="genres"	  javaType="java.util.List" column="movie_id" ofType="com.spring.watcha.model.Movie_genreVO" select="selectGenresByMovieId" />
       <collection  property="movieRoles" javaType="java.util.List" column="movie_id" ofType="com.spring.watcha.model.Movie_roleVO" select="selectMovieRolesByMovieId"/>
   </resultMap>
   
   <resultMap id="genreResultMap" type="com.spring.watcha.model.GenreVO">
       <id property="genre_id" column="genre_id" />
       <result property="genre_name" column="genre_name" />
   </resultMap>
   
   <resultMap id="movieRoleResultMap" type="com.spring.watcha.model.Movie_roleVO">
       <result property="role" column="role"/>
       <result property="casting_order" column="casting_order"/>
       <association property="actor" javaType="com.spring.watcha.model.ActorVO" resultMap="actorResultMap" />
   </resultMap>
   
   <resultMap id="actorResultMap" type="com.spring.watcha.model.ActorVO">
       <id property="actor_id" column="actor_id" />
       <result property="actor_name" column="actor_name"/>
       <result property="gender" column="gender"/>
       <result property="date_of_birth" column="date_of_birth"/>
       <result property="place_of_birth" column="place_of_birth"/>
       <result property="profile_image_path" column="profile_image_path"/>
   </resultMap>
   
   <select id="getMovieDetails" resultMap="movieResultMap" parameterType="String">
       SELECT movie_id, movie_title, overview, original_language, original_title, to_char(release_date, 'yyyy-mm-dd') as release_date, tagline, to_number(runtime) as runtime, poster_path, backdrop_path, to_number(rating_count) as rating_count
       , to_number(rating_avg) as rating_avg
       FROM movie
       WHERE movie_id = #{movie_id}
   </select>
   
   <select id="selectGenresByMovieId" resultMap="genreResultMap">
       SELECT MG.movie_id, G.genre_id, G.genre_name
       FROM genre G JOIN movie_genre MG 
       ON G.genre_id = MG.genre_id
       WHERE MG.movie_id = #{movie_id}
   </select>
   
   <select id="selectMovieRolesByMovieId" resultMap="movieRoleResultMap">
       SELECT MR.movie_id, MR.actor_id, MR.role, MR.casting_order, A.actor_name, A.gender, A.date_of_birth, A.place_of_birth, A.profile_image_path
       FROM movie_role MR JOIN actor A 
       ON MR.actor_id = A.actor_id
       WHERE MR.movie_id = #{movie_id}
   </select>
   <!-- 영화 및 드라마 등 정보 가져오기  끝 -->

   <!-- 유저의 컬랙션 카드  시작 -->
   <resultMap type="HashMap" id="collectionViewMap">
       <result property="collection_id"      column="collection_id"      javaType="String" />
       <result property="user_id"            column="userid"           	 javaType="String" />
       <result property="collection_name"    column="collection_name"    javaType="String" />
       <result property="movie_id"           column="movie_id"           javaType="String" />
       <result property="movie_title"   	 column="movie_title"        javaType="String" />
       <result property="runtime"   		 column="runtime"            javaType="String" />
       <result property="poster_path"   	 column="poster_path"        javaType="String" />
       <result property="rating_avg"   		 column="rating_avg"     	 javaType="String" />
       <result property="rating_count"   	 column="rating_count"       javaType="String" /> 
   </resultMap>
   
   <select id="getCollection_view" resultMap="collectionViewMap" parameterType="HashMap">
	select C.collection_id, C.user_id, C.collection_name, CM.movie_id, M.movie_title, M.runtime, M.poster_path, M.rating_avg, M.rating_count
	from collection C join collection_movie CM
	on C.collection_id = CM.collection_id
	join movie M
	on CM.movie_id = M.movie_id
	where user_id ='qwer1234' and C.collection_id = '1'
   </select>   
   <!-- 유저의 컬랙션 카드  끝 -->


   <!-- 더보기 시작 -->	
  <resultMap type="HashMap" id="totalCountMap"></resultMap>
   
   <select id="totalCount" resultMap="totalCountMap" parameterType="HashMap">
	select count(*) as count
	from collection C join collection_movie CM
	on C.collection_id = CM.collection_id
	join movie M
	on CM.movie_id = M.movie_id
	where user_id ='qwer1234' and C.collection_id = '1'
   </select>   

   <resultMap type="HashMap" id="cardSeeMoreMap">
       <result property="collection_id"      column="collection_id"      javaType="String" />
       <result property="user_id"            column="userid"           	 javaType="String" />
       <result property="collection_name"    column="collection_name"    javaType="String" />
       <result property="movie_id"           column="movie_id"           javaType="String" />
       <result property="movie_title"   	 column="movie_title"        javaType="String" />
       <result property="runtime"   		 column="runtime"            javaType="String" />
       <result property="poster_path"   	 column="poster_path"        javaType="String" />
       <result property="rating_avg"   		 column="rating_avg"     	 javaType="String" />
       <result property="rating_count"   	 column="rating_count"       javaType="String" /> 
   </resultMap>   
   <select id="cardSeeMore" resultMap="cardSeeMoreMap" parameterType="HashMap">
	select collection_id, user_id, collection_name, movie_id, movie_title, runtime, poster_path, rating_avg, rating_count
	from     
	(        
	select row_number() over(order by C.collection_id desc) AS RNO, C.collection_id, C.user_id, C.collection_name, CM.movie_id
	      , M.movie_title, M.runtime, M.poster_path, M.rating_avg, M.rating_count  
	from collection C join collection_movie CM
	on C.collection_id = CM.collection_id
	join movie M
	on CM.movie_id = M.movie_id
	where user_id ='qwer1234' and C.collection_id = '1' 
	 ) V
	 where RNO between #{start} and #{end}
   </select>   
   <!-- 더보기 끝 -->	
	
	<!-- 댓글쓰기 insert -->
	<insert id="addUserComment">
	INSERT INTO user_collection_comment 
	(user_collection_seq, user_id, collection_id, user_collection_content, user_collection_time, user_collection_status) 
	VALUES 
	(userCollectionSeq.nextval,#{user_id},#{collection_id},#{user_collection_content}, sysdate, default)
	</insert>
	
	<!-- 페이징 처리하기 -->
	<select id="uccListNoSearchWithPaging" parameterType="HashMap" resultType="com.spring.watcha.model.user_collection_commentVO">
	select user_collection_seq, user_id, collection_id, user_collection_content, user_collection_time
	from 
	(
	  select row_number() over(order by user_collection_seq desc) AS rno,
	         user_collection_seq, user_id, collection_id, user_collection_content,
	         to_char(user_collection_time, 'YYYY-MM-DD HH24:MI:SS') AS user_collection_time
	  from user_collection_comment
	  where user_collection_status = '1'
	) V 
	where rno between #{startRno} and #{endRno}
	</select>
	
	<!-- 원글 글번호에 해당하는 댓글의 totalPage 알아오기 -->
	<select id="getUserCommentTotalPage" parameterType="HashMap" resultType="int">
		select ceil(count(*)/#{sizePerPage})
		from user_collection_comment
		where user_collection_status = 1 and collection_id = #{collection_id}
	</select>
	
	
	
</mapper>

